package helper

import (
	"fmt"
	"github.com/faradey/madock/src/cli/fmtc"
)

func Help() {
	/* 16 commands */
	fmtc.WarningLn("Usage:")
	tab()
	fmt.Println("command [arguments]")
	fmtc.WarningLn("Available commands:")
	tab()
	fmtc.Success("bash")
	tab()
	fmt.Println("Connect into container using bash")
	tab()
	tab()
	fmtc.Title("--name")
	tab()
	fmt.Print("Name of container. Optional. Default container: php. For example: --name php, --name node, --name db, --name nginx")
	tabln()
	tab()
	tab()
	fmtc.Title("--root")
	tab()
	fmt.Println("Enter to container as root. Optional")
	tabln()
	tab()
	fmtc.Success("composer")
	tab()
	fmt.Println("Execute composer inside php container")
	tabln()
	tab()
	fmtc.Success("config")
	tab()
	fmt.Println("Viewing and changing the project configuration")
	tab()
	tab()
	fmtc.Warning("show")
	tab()
	fmt.Println("List all project environment settings")
	tab()
	tab()
	fmtc.Warning("set")
	tab()
	fmt.Println("Set parameters")
	tab()
	tab()
	tab()
	fmtc.Title("--hosts")
	tab()
	fmt.Println("Domains and code of project websites. Separated by commas. For example: one.example.com:base two.example.com:two_code. Optional")
	tabln()
	tab()
	fmtc.Success("cron")
	tab()
	fmt.Println("Enable / disable cron")
	tab()
	tab()
	fmtc.Warning("on")
	tab()
	fmt.Println("Enable cron")
	tab()
	tab()
	fmtc.Warning("off")
	tab()
	fmt.Println("Disable cron")
	tabln()
	tab()
	fmtc.Success("db")
	tab()
	fmt.Println("Database import / export")
	tab()
	tab()
	fmtc.Warning("import")
	tab()
	fmt.Println("Database import")
	tab()
	tab()
	fmtc.Warning("export")
	tab()
	fmt.Println("Database export")
	tab()
	tab()
	fmtc.Warning("soft-clean")
	tab()
	fmt.Println("Soft cleanup of the database from unnecessary garbage.")
	tabln()
	tab()
	fmtc.Success("debug")
	tab()
	fmt.Println("Enable / disable xdebug")
	tab()
	tab()
	fmtc.Warning("on")
	tab()
	fmt.Println("Enable xdebug")
	tab()
	tab()
	fmtc.Warning("off")
	tab()
	fmt.Println("Disable xdebug")
	tabln()
	tab()
	fmtc.Success("help")
	tab()
	fmt.Println("Displays help for commands")
	tabln()
	tab()
	fmtc.Success("logs")
	tab()
	fmt.Println("View logs of a container")
	tab()
	tab()
	fmtc.Title("--name [name of container]")
	tab()
	fmt.Println("Container name. Optional. Default container: php. Example: --name php")
	tabln()
	tab()
	fmtc.Success("magento")
	tab()
	fmt.Println("Execute Magento command inside php container")
	tabln()
	tab()
	fmtc.Success("node")
	tab()
	fmt.Println("Execute NodeJs command inside php container")
	tabln()
	tab()
	fmtc.Success("proxy")
	tab()
	fmt.Println("Actions on the proxy server")
	tab()
	tab()
	fmtc.Warning("start")
	tab()
	fmt.Println("Start a proxy server")
	tab()
	tab()
	fmtc.Warning("stop")
	tab()
	fmt.Println("Stop a proxy server")
	tab()
	tab()
	fmtc.Warning("restart")
	tab()
	fmt.Println("Restart a proxy server")
	tab()
	tab()
	fmtc.Warning("rebuild")
	tab()
	fmt.Println("Rebuild a proxy server")
	tab()
	tab()
	fmtc.Warning("prune")
	tab()
	fmt.Println("Prune a proxy server")
	tabln()
	tab()
	fmtc.Success("prune")
	tab()
	fmt.Println("Stop and delete running project containers")
	tabln()
	tab()
	fmtc.Success("rebuild")
	tab()
	fmt.Println("Recreation of all containers in the project. All containers are re-created and the images from the Dockerfile are rebuilt")
	tabln()
	tab()
	fmtc.Success("restart")
	tab()
	fmt.Println("Restarting all containers and services. Stop all containers and start them again")
	tabln()
	tab()
	fmtc.Success("setup")
	tab()
	fmt.Println("Initial project setup")
	tabln()
	tab()
	fmtc.Success("start")
	tab()
	fmt.Println("Starting all containers and services")
	tabln()
	tab()
	fmtc.Success("stop")
	tab()
	fmt.Println("Stopping all containers and services")

	fmt.Println("")
}

func tab() {
	fmt.Print("	")
}

func tabln() {
	fmt.Println("	")
}
